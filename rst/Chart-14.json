[
    {
        "snippet": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\npublic boolean removeRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker == null) {\n    throw new IllegalArgumentException(\"Null 'marker' argument.\");\n  }\n  ArrayList markers;\n  if (layer == Layer.FOREGROUND) {\n    markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));\n  }\n else {\n    markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));\n  }\n  boolean removed=markers.remove(marker);\n  if (removed && notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}\n",
        "method": "removeRangeMarker",
        "line": 2529,
        "class": "org.jfree.chart.plot.XYPlot"
    },
    {
        "snippet": "/** \n * Removes a marker for a specific dataset/renderer and, if requested,  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\npublic boolean removeDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  ArrayList markers;\n  if (layer == Layer.FOREGROUND) {\n    markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));\n  }\n else {\n    markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));\n  }\n  boolean removed=markers.remove(marker);\n  if (removed && notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}\n",
        "method": "removeDomainMarker",
        "line": 2293,
        "class": "org.jfree.chart.plot.XYPlot"
    },
    {
        "snippet": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n * @see #addRangeMarker(int,Marker,Layer,boolean)\n */\npublic boolean removeRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker == null) {\n    throw new IllegalArgumentException(\"Null 'marker' argument.\");\n  }\n  ArrayList markers;\n  if (layer == Layer.FOREGROUND) {\n    markers=(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));\n  }\n else {\n    markers=(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));\n  }\n  boolean removed=markers.remove(marker);\n  if (removed && notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}\n",
        "method": "removeRangeMarker",
        "line": 2448,
        "class": "org.jfree.chart.plot.CategoryPlot"
    },
    {
        "snippet": "/** \n * Removes a marker for a specific dataset/renderer and, if requested,  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\npublic boolean removeDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  ArrayList markers;\n  if (layer == Layer.FOREGROUND) {\n    markers=(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));\n  }\n else {\n    markers=(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));\n  }\n  boolean removed=markers.remove(marker);\n  if (removed && notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}\n",
        "method": "removeDomainMarker",
        "line": 2166,
        "class": "org.jfree.chart.plot.CategoryPlot"
    }
]