[{
    "snippet": "/** \n * Sort an array, performing the same reordering of entries on other arrays.\n * @param x Array to be sorted.\n * @param dir Order direction.\n * @param yList Set of arrays whose permutations of entries must followthose performed on  {@code x}.\n * @throws DimensionMismatchException if any {@code y} has not the samesize as  {@code x}.\n */\npublic static void sortInPlace(double[] x,final OrderDirection dir,double[]... yList){\n  if (x == null || yList == null) {\n    throw new NullArgumentException();\n  }\n  final int len=x.length;\n  final List<Pair<Double,double[]>> list=new ArrayList<Pair<Double,double[]>>(len);\n  final int yListLen=yList.length;\n  for (int i=0; i < len; i++) {\n    final double[] yValues=new double[yListLen];\n    for (int j=0; j < yListLen; j++) {\n      double[] y=yList[j];\n      if (y.length != len) {\n        throw new DimensionMismatchException(y.length,len);\n      }\n      yValues[j]=y[i];\n    }\n    list.add(new Pair<Double,double[]>(x[i],yValues));\n  }\n  final Comparator<Pair<Double,double[]>> comp=new Comparator<Pair<Double,double[]>>(){\n    public int compare(    Pair<Double,double[]> o1,    Pair<Double,double[]> o2){\n      int val;\nswitch (dir) {\ncase INCREASING:\n        val=o1.getKey().compareTo(o2.getKey());\n      break;\ncase DECREASING:\n    val=o2.getKey().compareTo(o1.getKey());\n  break;\ndefault :\nthrow new MathInternalError();\n}\nreturn val;\n}\n}\n;\nCollections.sort(list,comp);\nfor (int i=0; i < len; i++) {\nfinal Pair<Double,double[]> e=list.get(i);\nx[i]=e.getKey();\nfinal double[] yValues=e.getValue();\nfor (int j=0; j < yListLen; j++) {\nyList[j][i]=yValues[j];\n}\n}\n}\n",
    "method": "sortInPlace",
    "line": 2324,
    "class": "org.apache.commons.math.util.MathUtils"
}]